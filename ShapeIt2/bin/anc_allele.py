import argparse,sys,pysam
import pop_gen_misc as pgm
import numpy as np
"""	Example of the input required by LDhelmet
	#POS  A   C   G   T
	2118 0.1 0.2 0.3 0.4
	7346 0.2 0.2 0.2 0.4
	8769 0.1 0.1 0.1 0.7 """



def get_anc_prior_basic(f,trans_mat,stat_dist):
	x = f.strip("\n").split("\t")
#	allele_d = {0:"A",1:"C",2:"G",3:"T"}
	count = 0
	if ".,.,.,." in x:
		return stat_dist
	if "1" in x[7]:
		return stat_dist
	else:
		fam = x[7].split(",")
		rat = x[9].split(",")
	if rat.index("1") != fam.index("2"):
		return stat_dist
	else:
		prior_d = [] 
		for a in rat:
			if a!="0":
				prior_d.append("0.91")
			else:
				prior_d.append("0.03")
	return prior_d
	
parser = argparse.ArgumentParser(description="Take a list of coordiantes and generate a file with the ancestral allele specified in it, based upon the corresponding data for that SNP in the .freq files ", usage="anc_allele.py --coords [-f] --vcf [-v] phased_sequences.vcf --matrix [-m]")




parser.add_argument("-v", "--vcf",
        required = True,
	type = str,
	help = "This is VCF file that you want to get coordinates from, has t obe BGZipped and Tabixed")

parser.add_argument("-f", "--coords",
        required = True,
	type = str,
	help = "The file with the coords in it, generated by the get_LDHelmet_fasta_ranges.py script")

parser.add_argument("-m", "--matrix",
        required = True,
	type = str,
	help = "The file with the rate matrix in it")

parser.add_argument("-c", "--chrom",
        required = True,
	type = str,
	help = "The chromosome you are using, give as an integer or letter")

parser.add_argument("-o", "--output_path",
        required = False,
	type = str,
	default = "",
	help = "Where do you want to dump the output?")


args = parser.parse_args()



trans_mat = np.matrix([map(float,i.strip("\n").split("\t")) for i in open(args.matrix,"r").readlines()])

stat_dist = pgm.stationary_distribution(trans_mat) 

vcf = pysam.Tabixfile(args.vcf)
freq = pysam.Tabixfile("/home/booker/mouse_genome/freq_files/chr"+args.chrom+"/chr"+args.chrom+".freq.gz")


for i in open(args.coords):
	chrom = i.strip("\n").split(":")[0]
	start = int(i.strip("\n").split(":")[1].split("-")[0])
	end = int(i.strip("\n").split(":")[1].split("-")[1])
	var_pos = [i.split("\t")[1] for i in vcf.fetch(chrom,start-1,end)]
	pos_dict = {}
	out = open(args.output_path+chrom+"_"+str(start)+"-"+str(end)+".anc","w")
	for j in var_pos:
		pos_dict[j]=1
	for f in freq.fetch(chrom,start-1,end):
		try:
			pos = int(f.split("\t")[1])
			pos_dict[str(pos)]
			anc_prior = map(str,get_anc_prior_basic(f,trans_mat,stat_dist))	
			out.write(str(pos - start)+" "+" ".join(anc_prior)+"\n")
		except KeyError: continue
	out.close()
