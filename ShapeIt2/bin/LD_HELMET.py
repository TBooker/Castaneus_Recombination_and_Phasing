#! /usr/bin/python
import argparse, os, glob#, email_tom
from multiprocessing import Pool
#  the arguments required for this script are:
#                 The fasta_file
#                 The number of processors to use
#                 

def execution(command):
	os.system(command)

parser = argparse.ArgumentParser(description="Take a fasta file of phased haplotypes and run them into LDhelmet", usage="LD_HELMET.py --fasta [-f] phased_sequences.fasta --procs [-p] X")

parser.add_argument("-d", "--dir",
        required = True,
	type = str,
	help = "This is the directory containing the FASTA files of phased haplotypes generated by HapSeq/thunder/Shapeit2 and processed by vcf2fasta.py")
parser.add_argument("-p","--procs",
        required = True,
	type = int,
	help = "Specify the number of processors you want to use")
parser.add_argument("-o","--out",
        required = False,
        type = str,
        help = "Give the prefix you want to give all the output...")
parser.add_argument("-t","--theta",
        required = False,
        type = float,
        help = "Give the value of theta for this population. Default is based on Halligan et al (2013) = 0.0083",
        default = 0.0083)
parser.add_argument("--files",
        required = False,
        type = str,
        help = "Give the name of the files needed to run LDhelmet, .pade, .conf, .lk, These are the same for a constant sample size and can then be used for multiple files. Specify the name of the files without the prefix. If you don't supply these the script will generate new ones",
        default = "")


args = parser.parse_args()
procs = int(args.procs)
output_prefix = args.out
theta = str(args.theta)

fastas = glob.glob(args.dir+"/*")
os.system("mkdir post_files")
if args.files == "":
## Get the haplotype configuration file
	os.system("ldhelmet find_confs --num_threads " + procs +" -w 50 -o "+output_prefix + ".conf " + fasta)
## Get the Pade coefficients from the configuration file
	os.system("ldhelmet pade --num_threads "+ procs+" -c "+output_prefix+".conf -t "+theta+" -x 11 -o "+output_prefix+".pade")
## Get the likelihod lookup table
	os.system("ldhelmet table_gen --num_threads "+procs+" -c "+output_prefix+".conf -t "+theta+" -r 0.0 0.1 10.0 1.0 100.0 -o "+output_prefix+".lk")

## Perform the random-jumpMCMC using the settings recommended in the LDhelmt manual
commands = []
if args.files == "":
	for i in fastas:
		name = "post_files/"+i.split("/")[-1]
		
		command = str("ldhelmet rjmcmc --num_threads 1 -w 50 -l "+output_prefix+".lk -p "+output_prefix+".pade -b 50.0 -s "+fasta+" --burn_in 100000 -n 1000000 -o "+name+".post")
		commands.append(command)
else:
	for i in fastas:
		name = "post_files/"+i.split("/")[-1]

		command = str("ldhelmet rjmcmc --num_threads 1 -w 50 -l "+args.files+".lk -p "+args.files+".pade -b 50.0 -s "+i+" --burn_in 100000 -n 1000000 -o "+name+".post")
		commands.append(command)	

#email_tom.send_email(str("Your LDhelmet run is finsihed for: " + fasta ))
for i in commands:
	print i
p = Pool(procs)
p.map(execution,commands)

